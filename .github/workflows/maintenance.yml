name: Maintenance Tasks

on:
  schedule:
    # Run every Sunday at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      task:
        description: 'Maintenance task to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - dependencies
          - security
          - cleanup

env:
  NODE_VERSION: '18'

jobs:
  # Dependency Updates
  update-dependencies:
    name: 📦 Update Dependencies
    runs-on: ubuntu-latest
    if: github.event.inputs.task == 'all' || github.event.inputs.task == 'dependencies' || github.event_name == 'schedule'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 📦 Check for outdated dependencies
        run: |
          echo "## 📦 Dependency Update Report" > dependency-report.md
          echo "" >> dependency-report.md
          echo "### Outdated Dependencies:" >> dependency-report.md
          echo "" >> dependency-report.md
          npm outdated --json >> dependency-report.md || echo "No outdated dependencies found" >> dependency-report.md

      - name: 📦 Update dependencies
        run: |
          # Update patch and minor versions
          npm update
          
          # Check for major version updates
          npx npm-check-updates --target minor

      - name: 🧪 Run tests after update
        run: npm run test:coverage

      - name: 🏗️ Build after update
        run: npm run build

      - name: 📝 Create PR for dependency updates
        if: github.event_name == 'schedule'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore: update dependencies'
          title: '📦 Automated Dependency Updates'
          body: |
            ## 📦 Automated Dependency Updates
            
            This PR contains automated dependency updates.
            
            ### Changes:
            - Updated patch and minor versions
            - Checked for major version updates
            
            ### Testing:
            - ✅ All tests passing
            - ✅ Build successful
            
            Please review and merge if everything looks good.
          branch: automated-dependency-updates
          delete-branch: true

  # Security Audit
  security-audit:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    if: github.event.inputs.task == 'all' || github.event.inputs.task == 'security' || github.event_name == 'schedule'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔒 Run security audit
        run: |
          echo "## 🔒 Security Audit Report" > security-report.md
          echo "" >> security-report.md
          echo "### NPM Audit Results:" >> security-report.md
          echo "" >> security-report.md
          npm audit --json >> security-report.md || echo "No vulnerabilities found" >> security-report.md

      - name: 🔒 Run Snyk security scan
        if: env.SNYK_TOKEN != ''
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --json-file-output=snyk-report.json

      - name: 📊 Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            security-report.md
            snyk-report.json
          retention-days: 30

  # Code Quality Check
  code-quality-check:
    name: 🔍 Code Quality Check
    runs-on: ubuntu-latest
    if: github.event.inputs.task == 'all' || github.event_name == 'schedule'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Run ESLint
        run: npx eslint src/ --ext .js,.jsx --format json --output-file eslint-report.json

      - name: 🎨 Check code formatting
        run: npx prettier --check "src/**/*.{js,jsx,json,css,md}"

      - name: 📊 Generate code quality report
        run: |
          echo "## 🔍 Code Quality Report" > quality-report.md
          echo "" >> quality-report.md
          echo "### ESLint Results:" >> quality-report.md
          echo "" >> quality-report.md
          cat eslint-report.json >> quality-report.md

  # Performance Check
  performance-check:
    name: ⚡ Performance Check
    runs-on: ubuntu-latest
    if: github.event.inputs.task == 'all' || github.event_name == 'schedule'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build application
        run: npm run build

      - name: ⚡ Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './.lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

  # Cleanup
  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    if: github.event.inputs.task == 'all' || github.event.inputs.task == 'cleanup' || github.event_name == 'schedule'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🧹 Clean up old artifacts
        run: |
          echo "## 🧹 Cleanup Report" > cleanup-report.md
          echo "" >> cleanup-report.md
          echo "### Cleanup completed:" >> cleanup-report.md
          echo "- Old build artifacts" >> cleanup-report.md
          echo "- Temporary files" >> cleanup-report.md
          echo "- Cache cleanup" >> cleanup-report.md

      - name: 📊 Upload cleanup report
        uses: actions/upload-artifact@v4
        with:
          name: cleanup-report
          path: cleanup-report.md
          retention-days: 7

  # Summary
  summary:
    name: 📋 Maintenance Summary
    runs-on: ubuntu-latest
    needs: [update-dependencies, security-audit, code-quality-check, performance-check, cleanup]
    if: always()
    
    steps:
      - name: 📋 Generate maintenance summary
        run: |
          echo "## 🔧 Maintenance Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Task | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Dependencies | ${{ needs.update-dependencies.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security | ${{ needs.security-audit.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Code Quality | ${{ needs.code-quality-check.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance | ${{ needs.performance-check.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Cleanup | ${{ needs.cleanup.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Date:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
