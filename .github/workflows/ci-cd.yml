name: CI/CD Pipeline

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]

env:
  NODE_VERSION: '18'
  REACT_APP_VERSION: ${{ github.sha }}

jobs:
  # Test Job
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Run ESLint
        run: npm run lint --if-present || npx eslint src/ --ext .js,.jsx

      - name: 🧪 Run unit tests
        run: npm run test:coverage

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: 📈 Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: romeovs/lcov-reporter-action@v0.3.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          lcov-file: ./coverage/lcov.info
          delete-old-comments: true

  # Build Job
  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build application
        run: npm run build
        env:
          REACT_APP_VERSION: ${{ env.REACT_APP_VERSION }}
          REACT_APP_BUILD_DATE: ${{ github.event.head_commit.timestamp }}

      - name: 📦 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: build/
          retention-days: 7

      - name: 📊 Build size analysis
        run: |
          echo "Build size analysis:"
          du -sh build/
          echo "Largest files:"
          find build/ -type f -exec du -h {} + | sort -hr | head -10

  # Database Setup Job
  database-setup:
    name: 🗄️ Database Setup
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🗄️ Test database connection
        run: npm run test-db
        env:
          REACT_APP_NEON_DATABASE_URL: ${{ secrets.REACT_APP_NEON_DATABASE_URL }}

      - name: 🗄️ Setup database schema
        run: npm run setup-db
        env:
          REACT_APP_NEON_DATABASE_URL: ${{ secrets.REACT_APP_NEON_DATABASE_URL }}

      - name: 🗄️ Verify database setup
        run: npm run verify-db
        env:
          REACT_APP_NEON_DATABASE_URL: ${{ secrets.REACT_APP_NEON_DATABASE_URL }}

  # Deploy to Netlify
  deploy:
    name: 🚀 Deploy to Netlify
    runs-on: ubuntu-latest
    needs: [build, database-setup]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build for production
        run: npm run build
        env:
          REACT_APP_VERSION: ${{ env.REACT_APP_VERSION }}
          REACT_APP_BUILD_DATE: ${{ github.event.head_commit.timestamp }}
          REACT_APP_NEON_DATABASE_URL: ${{ secrets.REACT_APP_NEON_DATABASE_URL }}

      - name: 🚀 Deploy to Netlify
        uses: nwtgck/actions-netlify@v2.0
        with:
          publish-dir: './build'
          production-branch: master
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy from GitHub Actions - ${{ github.sha }}"
          enable-pull-request-comment: true
          enable-commit-comment: true
          overwrites-pull-request-comment: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

      - name: 🔗 Get deployment URL
        id: netlify
        run: |
          echo "url=${{ steps.netlify.outputs.url }}" >> $GITHUB_OUTPUT

      - name: 📝 Comment deployment URL on commit
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: `🚀 **Deployment Successful!**\n\n**Live URL:** ${{ steps.netlify.outputs.url }}\n**Commit:** ${{ github.sha }}\n**Branch:** ${{ github.ref_name }}`
            })

  # Security Scan
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔒 Run security audit
        run: npm audit --audit-level=moderate

      - name: 🔒 Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # Performance Test
  performance:
    name: ⚡ Performance Test
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: build/

      - name: ⚡ Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v12
        with:
          configPath: './.lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

  # Notification
  notify:
    name: 📢 Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy, security, performance]
    if: always() && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    
    steps:
      - name: 📢 Notify on success
        if: needs.deploy.result == 'success'
        run: |
          echo "✅ Deployment successful!"
          echo "🚀 Application deployed to production"
          echo "🔗 URL: ${{ needs.deploy.outputs.url }}"

      - name: 📢 Notify on failure
        if: needs.deploy.result == 'failure'
        run: |
          echo "❌ Deployment failed!"
          echo "🔍 Check the logs for details"
